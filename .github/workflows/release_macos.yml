name: Release for macOS

on:
  push:
    tags:
      - '*'

jobs:

  release-dlsh:

    # Build on not-the-latest to keep dependency versions modest.
    runs-on: macos-14

    permissions:
      contents: write

    steps:

      - name: Install cmake build tool and dependencies lz4 and tcl9.0.
        run: |
          brew update
          brew install cmake lz4 tcl-tk@9

      - name: Check out our code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Build and install jansson static lib.
        run: |
          cd deps/jansson/
          cmake -DCMAKE_POLICY_VERSION_MINIMUM=3.5 -B build
          cmake --build build
          sudo cmake --install build

      - name: Install Libharu static lib to the build environment.
        run: |
          cd deps/libharu/
          cmake -DBUILD_SHARED_LIBS=OFF -B build
          cmake --build build
          sudo cmake --install build

      - name: Checkout dependencies not available from public repos
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/dlsh-dependencies
          token: ${{ secrets.DLSH_DEPENDENCIES_TOKEN }}
          path: deps/dlsh-dependencies

      - name: Set up a keychain for Apple code signing.
        env:
          CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
          APP_CERTIFICATE_BASE64: ${{ secrets.APPLE_APP_CERTIFICATE_BASE64 }}
          INSTALLER_CERTIFICATE_BASE64: ${{ secrets.APPLE_INSTALLER_CERTIFICATE_BASE64 }}
        run: |
          # Reconstitute text-encoded secrets as binary .p12 files.
          APP_CERTIFICATE_PATH=$RUNNER_TEMP/developerID_application.p12
          echo -n "$APP_CERTIFICATE_BASE64" | base64 --decode -o $APP_CERTIFICATE_PATH
          INSTALLER_CERTIFICATE_PATH=$RUNNER_TEMP/developerID_installer.p12
          echo -n "$INSTALLER_CERTIFICATE_BASE64" | base64 --decode -o $INSTALLER_CERTIFICATE_PATH

          # Create a new keychain for use in CI.
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Add our certificates to the keychain.
          security import $APP_CERTIFICATE_PATH -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security import $INSTALLER_CERTIFICATE_PATH -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"

          # Alow codesign util and the current user to use this keychain for signing.
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Log info about this keychain for debuging.
          security find-identity -p basic -v

      - name: Build, sign, package, and notarize dlsh.
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          INSTALLLER_CERT_ID: ${{ secrets.APPLE_INSTALLLER_CERT_ID }}
        run: |
          cmake -B build -G Xcode -D CMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM="$TEAM_ID" -D PROJECT_VERSION=${{ github.ref_name }} -D DLSH_DEPENDENCIES=${{ github.workspace }}/deps/dlsh-dependencies
          cmake --build build --config Release
          cpack -G productbuild --config build/CPackConfig.cmake
          productsign --sign "$INSTALLLER_CERT_ID" dlsh-${{ github.ref_name }}-Darwin.pkg dlsh-${{ github.ref_name }}-Darwin-signed.pkg

          xcrun notarytool store-credentials --apple-id "$APPLE_ID" --team-id "$TEAM_ID" --password "$APPLE_APP_PASSWORD" "dlsh-signing"
          xcrun notarytool submit dlsh-${{ github.ref_name }}-Darwin-signed.pkg --keychain-profile "dlsh-signing" --wait
          xcrun stapler staple dlsh-${{ github.ref_name }}-Darwin-signed.pkg

          # TODO install and zip dlsh.zip
          # cmake -B build -G Xcode -D CMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM="$TEAM_ID" -D CMAKE_INSTALL_PREFIX=build/dlsh-zip -D DLSH_DEPENDENCIES=${{ github.workspace }}/deps/dlsh-dependencies
          # cmake --install build --component dlsh-zip
          # cd build/dlsh-zip/
          # zip -r dlsh-${{ github.ref_name }}-Linux-$(dpkg --print-architecture).zip lib/


      - name: Create a GitHub release for the current tag and package.
        uses: ncipollo/release-action@v1
        with:
          artifacts: "./*-signed.pkg"
          body: libs and headers for dlsh version ${{ github.ref_name }}
          generateReleaseNotes: true
          allowUpdates: true
